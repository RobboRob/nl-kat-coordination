# === Notes === #

# {% ... } values are generated dynamically for security reasons when this file is copied through `make env`.
# After removing your `.env` file, you must run `make reset` to wipe the old container credentials.


### --- DOCKER SERVICES SETTINGS --- ###


# --- PostgreSQL --- #
POSTGRES_USER=postgres
POSTGRES_PASSWORD={%POSTGRES_PASSWORD}


# --- RabbitMQ --- #
RABBITMQ_DEFAULT_VHOST=kat
RABBITMQ_DEFAULT_USER={%QUEUE_USERNAME}
RABBITMQ_DEFAULT_PASS={%QUEUE_PASSWORD}


### --- GENERAL SETTINGS --- ###
# Container entrypoints will run database migrations if set to "true"
DATABASE_MIGRATION=True

# If you use docker-compose.release-example.yml as base for a docker compose
# based setup you can use this variable to define the version of OpenKAT you
# want to use. Example value: v1.9.0
# KAT_VERSION=

# OpenTracing https://docs.openkat.nl/technical_design/localinstall.html#opentelemetry
# SPAN_EXPORT_GRPC_ENDPOINT=http://jaeger:4317


# --- Endpoints --- #
OCTOPOES_API=http://octopoes_api:80
SCHEDULER_API=http://scheduler:8000
KEIKO_API=http://keiko:8000
KATALOGUS_API=http://katalogus:8000

# Bytes uses JWT for authentication
BYTES_API=http://bytes:8000
BYTES_USERNAME={%BYTES_USERNAME}
BYTES_PASSWORD={%BYTES_PASSWORD}


# --- Octopoes, Boefjes & Bytes shared --- #
QUEUE_URI=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/${RABBITMQ_DEFAULT_VHOST}

# File path to the log configuration file, default is "logging.yml"
# LOG_CFG=


### --- MODULE SPECIFIC SETTINGS --- ###


# --- Rocky --- #
# See `rocky/rocky/settings.py`

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY={%SECRET_KEY}

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG=True

# SECURITY WARNING: enable two factor authentication in production!
TWOFACTOR_ENABLED=True

DJANGO_SUPERUSER_EMAIL=superuser@localhost
DJANGO_SUPERUSER_FULL_NAME="KAT Superuser"
DJANGO_SUPERUSER_PASSWORD={%DJANGO_SUPERUSER_PASSWORD}

# https://docs.openkat.nl/technical_design/hardening.html#django-allowed-hosts
DJANGO_ALLOWED_HOSTS=127.0.0.1,localhost

# https://docs.openkat.nl/technical_design/hardening.html#django-csrf-trusted-origins
DJANGO_CSRF_TRUSTED_ORIGINS=http://localhost,http://127.0.0.1

# Email settings for SMTP
# Very important, when you set SSL then disable or leave TLS blank
# vice versa as well, when you set TLS leave SSL blank
# To use or test development SMTP, use EMAIL_BACKEND='django.core.mail.backends.smtp.EmailBackend'
# EMAIL_BACKEND=
# EMAIL_HOST=
# EMAIL_PORT=
# EMAIL_HOST_USER=
# EMAIL_HOST_PASSWORD=
# DEFAULT_FROM_EMAIL=
# SERVER_EMAIL=
# HELP_DESK_EMAIL=

# RFC 8314 recommends implicit TLS connections.
# See https://docs.djangoproject.com/en/4.0/ref/settings/#email-use-tls for other possibilities.
# EMAIL_USE_TLS=
# EMAIL_USE_SSL=

# Make sure these headers can never be set by an attacker, see also the security
# warning at https://docs.djangoproject.com/en/4.2/howto/auth-remote-user/
# See https://docs.openkat.nl/technical_design/externalauthentication.html#external-authentication
# REMOTE_USER_HEADER=
# REMOTE_USER_FALLBACK=
# REMOTE_USER_DEFAULT_ORGANIZATIONS=

ROCKY_DB=rocky
ROCKY_DB_USER=rocky_app
ROCKY_DB_PASSWORD={%ROCKY_DB_PASSWORD}
ROCKY_DB_HOST=postgres
ROCKY_DB_PORT=5432

# Instead of specifying the above ROCKY_DB_* variables, you can also use a DSN directly.
# If the DSN is set, it will override the above variables.
ROCKY_DB_DSN=postgres://${ROCKY_DB_USER}:${ROCKY_DB_PASSWORD}@${ROCKY_DB_HOST}:${ROCKY_DB_PORT}/${ROCKY_DB}


# --- Boefjes --- #
# See `boefjes/boefjes/config.py`
# See https://docs.openkat.nl/technical_design/environmentvariables.html#boefjes

# QUEUE_NAME_BOEFJES=boefjes
# QUEUE_NAME_NORMALIZERS=normalizers

KATALOGUS_DB=katalogus
KATALOGUS_DB_USER=katalogus_app
KATALOGUS_DB_PASSWORD={%KATALOGUS_DB_PASSWORD}
KATALOGUS_DB_URI=postgresql://${KATALOGUS_DB_USER}:${KATALOGUS_DB_PASSWORD}@postgres:5432/${KATALOGUS_DB}

# REMOTE_NS=8.8.8.8
# ENABLE_DB=True
# POOL_SIZE=2
# POLL_INTERVAL=1


# --- Bytes --- #
# See `bytes/bytes/config.py`
# See https://docs.openkat.nl/technical_design/environmentvariables.html#bytes

SECRET={%SECRET}
ACCESS_TOKEN_EXPIRE_MINUTES=1000

BYTES_DB=bytes
BYTES_DB_USER=bytes_app
BYTES_DB_PASSWORD={%BYTES_DB_PASSWORD}
BYTES_DB_URI=postgresql://${BYTES_DB_USER}:${BYTES_DB_PASSWORD}@postgres:5432/${BYTES_DB}

# The time to cache slow queries performed in the metrics endpoint.
BYTES_METRICS_TTL_SECONDS=0

# Optional file with Bytes logs.
# BYTES_LOG_FILE=bytes.log

# Root for all the data. A change means that you no longer have access to old data unless you move it!
# BYTES_DATA_DIR=/data

# Unix permission level on the folders Bytes creates to save raw files
# BYTES_FOLDER_PERMISSION=740

# Unix permission level on the raw files themselves
# BYTES_FILE_PERMISSION=640

# Encryption to use for the katalogus settings
ENCRYPTION_MIDDLEWARE=IDENTITY

# Hashing/Encryption
# HASHING_ALGORITHM="SHA512"
# EXT_HASH_SERVICE="IN_MEMORY"
# PASTEBIN_API_DEV_KEY=""

# KATalogus NaCl Sealbox base-64 private key string
# KAT_PRIVATE_KEY_B64=""

# KATalogus NaCl Sealbox base-64 public key string
# VWS_PUBLIC_KEY_B64=""

# Timestamping. See https://github.com/trbs/rfc3161ng for a list of public providers and their certificates
# RFC3161_PROVIDER=
# RFC3161_CERT_FILE=


# --- Keiko --- #
# See `keiko/keiko/settings.py`

# Boolean value that determines if the scheduler should run in debug mode
# KEIKO_DEBUG=False

# File path to the log configuration file
# KEIKO_LOG_CFG=logging.json

# File path to templates folder
# KEIKO_TEMPLATES_FOLDER=templates

# File path to glossaries folder
# KEIKO_GLOSSARIES_FOLDER=glossaries

# File path to reports folder
# KEIKO_REPORTS_FOLDER=/reports

# File path to assets folder
# KEIKO_ASSETS_FOLDER=assets


# --- Mula --- #
# See `mula/scheduler/config/settings.py`

# Refactoring note: scheduler should use the QUEUE_URI variable directly, this is redundant
SCHEDULER_RABBITMQ_DSN=${QUEUE_URI}

SCHEDULER_DB=scheduler
SCHEDULER_DB_USER=scheduler_app
SCHEDULER_DB_PASSWORD={%SCHEDULER_DB_PASSWORD}
SCHEDULER_DB_DSN=postgresql://${SCHEDULER_DB_USER}:${SCHEDULER_DB_PASSWORD}@postgres:5432/${SCHEDULER_DB}

# Enable the boefje populate_queue, default: False
SCHEDULER_BOEFJE_POPULATE=True

# Enable the normalizer populate_queue, default: True
SCHEDULER_NORMALIZER_POPULATE=True

# File path to the log configuration file
# SCHEDULER_LOG_CFG=../../../logging.json

# How many items a priority queue can hold
# SCHEDULER_PQ_MAXSIZE=1000

# Interval in seconds of the  execution of the `populate_queue` method of the
# `scheduler.Scheduler` class
# SCHEDULER_PQ_INTERVAL=60

# Grace period of when a job is considered to be running again (in seconds),
# SCHEDULER_PQ_GRACE=86400

# Maximum number of random objects to be added to the priority queue
# SCHEDULER_PQ_MAX_RANDOM_OBJECTS=50

# Boolean value that determines if the scheduler should run in debug mode.
# SCHEDULER_DEBUG=False

# Interval in seconds of the execution of the `monitor_organisations` method
# of the scheduler application to check newly created or removed organisations
# from katalogus. It updates the organisations, their plugins, and the
# creation of their schedulers.
# SCHEDULER_MONITOR_ORGANISATIONS_INTERVAL=60

# SCHEDULER_KATALOGUS_CACHE_TTL=30


# --- Octopoes --- #
# See `octopoes/octopoes/config/settings.py`

# Interval in seconds of the periodic task that
# SCAN_LEVEL_RECALCULATION_INTERVAL=60

# Celery task queue name
# QUEUE_NAME_OCTOPOES=octopoes

# XTDB_URI=http://crux:3000

# XTDB type. Determines how Octopoes will format documents' primary in serialization (crux.db/id vs xt/id)
# allowed values:
# - xtdb
# - crux
# - xtdb-multinode
XTDB_TYPE=xtdb-multinode

# BITS_ENABLED=
# BITS_DISABLED=
